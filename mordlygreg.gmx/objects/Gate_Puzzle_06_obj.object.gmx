<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initialize the switches into an array for access later on
for (var i = 0; i &lt; 9; i++)
{
    plate[i] = instance_find(Pressure_Plate_obj, i);
}

//initialize my gate objects into an array
for (var i = 0; i &lt; 16; i++)
{
    gate[i] = instance_find(Small_Gate_obj, i);
}

//initalize the candles into something i can access later
candle[0] = instance_find(Candle_Blue_obj, 0);
candle[1] = instance_find(Candle_Orange_obj, 0);
candle[2] = instance_find(Candle_Red_obj, 0);
candle[3] = instance_find(Candle_White_obj, 0);

//set a variable on the candles so that order can be tracked
for (var i = 0; i &lt; 4; i++)
{
    candle[i].door = id;
}
count = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//fishman enemy section, top left
if (plate[0].active == true)
{
    gate[0].opened = true;
    gate[1].opened = true;
}
else
{
    gate[0].opened = false;
    gate[1].opened = false;
}


//bottom left section, time bullet through gates section
if (plate[2].active == true)
{
    gate[7].opened = true;
    gate[6].opened = false;
}
else
{
    gate[7].opened = false;
    gate[6].opened = true;
}

//bottom left section, after breaking bottomost, leftmost crate
if (plate[1].active == true)
{
    for (var i = 0; i &lt; 4; i++)
    { gate[i+2].opened = false; }
}
else
{
    for (var i = 0; i &lt; 4; i++)
    { gate[i+2].opened = true; }
}


//top right section, part with switches closer to door
if (plate[3].active == true &amp;&amp; plate[4].active == true)
{
    gate[8].opened = true;
    gate[9].opened = false;
}
else if (plate[3].active == true xor plate[4].active == true)
{
    gate[8].opened = false;
    gate[9].opened = false;
}
else
{
    gate[8].opened = false;
    gate[9].opened = true;
}

//top right section, the part that happens after the other part
if (plate[7].active == true)
{
    gate[10].opened = false;
}
else
{
    gate[10].opened = true;
}


//bottom right section
if (plate[8].active == true)
{
    gate[11].opened = true;
}
else
{
    gate[11].opened = false;
}


//center section, the candle bit
if (candle[0].order != 0 &amp;&amp; candle[1].order != 0 &amp;&amp; candle[2].order != 0 &amp;&amp; candle[3].order != 0)
{
    if (candle[0].order == 4 &amp;&amp; candle[1].order == 3 &amp;&amp; candle[2].order == 2 &amp;&amp; candle[3].order == 1)
    {
        gate[12].opened = true;
        gate[13].opened = true;
    }
    else
    {
        //reset puzzle
        count = 4;
        for (var i = 0; i &lt; 4; i++)
        { candle[i].order = 0; }
    }
}
else
{
    gate[12].opened = false;
    gate[13].opened = false;
}

//center section, the boss key bit
if (plate[5].active == true || plate[6].active == true)
{
    gate[14].opened = false;
    gate[15].opened = false;
}
else
{
    gate[14].opened = true;
    gate[15].opened = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
