<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Shrine_v02_spr</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Wall_obj</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>red = instance_find(Candle_Red_obj, 1);
blue = instance_find(Candle_Blue_obj, 1);
orange = instance_find(Candle_Orange_obj, 1);
white = instance_find(Candle_White_obj, 1);

countMax = 4;
count = countMax;
solved = false;

newPosition = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (count == 0)
{
    if (red.order == 2 &amp;&amp; blue.order == 3 &amp;&amp; orange.order == 4 &amp;&amp; white.order == 1)
    {
        solved = true;
        newPosition = (y-(32));
        count--;
        show_debug_message("SOLVED");
    }
    else
    {
        red.order = 0;
        blue.order = 0;
        orange.order = 0;
        white.order = 0;
        
        count = countMax;
        show_debug_message("WRONG");
    }
}

if (solved == true)
{
    move_towards_point(x, newPosition, 1);
    
    with(red) {move_towards_point(x, door.newPosition, 1);}
    with(blue) {move_towards_point(x, door.newPosition, 1);}
    with(white) {move_towards_point(x, door.newPosition, 1);}
    with(orange) {move_towards_point(x, door.newPosition, 1);}
    
    if (y &lt;= newPosition) 
    {
        solved = false; 
        
        speed = 0;
        red.speed = 0;
        blue.speed = 0;
        white.speed = 0;
        orange.speed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
